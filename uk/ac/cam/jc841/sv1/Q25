==> OOPQueue.java <==
package uk.ac.cam.jc841.sv1;

public interface OOPQueue {
  public boolean isEmpty();
  public int getHead() throws OOPQueueException;
  public void dequeue() throws OOPQueueException;
  public void enqueue(int x);
}

==> OOPListQueue.java <==
package uk.ac.cam.jc841.sv1;

class OOPListQueue implements OOPQueue {
  private OOPLinkedList front = new OOPLinkedList();
  private OOPLinkedList rear = new OOPLinkedList();

  private void normalise() {
    if (front.isEmpty() && !rear.isEmpty()) {
      front = rear;
      front.reverse();
      rear = new OOPLinkedList();
    }
  }

  public boolean isEmpty() {
    return (front.isEmpty() && rear.isEmpty());
  }

  public int getHead() throws OOPQueueException {
    if (isEmpty()) {
      throw new OOPQueueException("nothing to get");
    } else {
      return front.getHead();
    }
  }

  public void dequeue() throws OOPQueueException {
    if (isEmpty()) {
      throw new OOPQueueException("nothing to dequeue");
    } else {
      front.deleteHead();
      normalise();
    }
  }

  public void enqueue(int x) {
    rear.addHead(x);
    normalise();
  }
}

==> OOPArrayQueue.java <==
package uk.ac.cam.jc841.sv1;

public class OOPArrayQueue implements OOPQueue {
  private int[] contents = new int[0];
  private int length = 0;
  private int start = 0;
  private static int expansionAmount = 10;

  private void expand() {
    int[] newContents = new int[contents.length + expansionAmount];
    for (int i = 0; i < length; i++) {
      newContents[i] = contents[(start + i) % contents.length];
    }
    contents = newContents;
    start = 0;
  }

  public boolean isEmpty() {
    return (length == 0);
  }

  public int getHead() throws OOPQueueException {
    if (isEmpty()) {
      throw new OOPQueueException("nothing to get");
    } else {
      return contents[start];
    }
  }

  public void dequeue() throws OOPQueueException {
    if (isEmpty()) {
      throw new OOPQueueException("nothing to dequeue");
    } else {
      start++;
      length--;
    }
  }

  public void enqueue(int x) {
    if (!(length < contents.length)) {
      expand();
    }

    contents[(start + length) % contents.length] = x;
    length++;
  }
}

==> OOPQueueException.java <==
package uk.ac.cam.jc841.sv1;

public class OOPQueueException extends RuntimeException {
  public OOPQueueException(String msg) {
    super(msg);
  }
}

==> OOPQueueTest.java <==
package uk.ac.cam.jc841.sv1;

public class OOPQueueTest {
  public static void main(String[] args) {
    OOPQueue testQueue = new OOPArrayQueue();

    System.out.println(testQueue.isEmpty());

    testQueue.enqueue(3);
    testQueue.enqueue(6);
    testQueue.enqueue(-2);

    System.out.println(testQueue.isEmpty());
    System.out.println(testQueue.getHead());

    testQueue.dequeue();

    System.out.println(testQueue.getHead());

    testQueue.dequeue();
    testQueue.enqueue(4);

    System.out.println(testQueue.getHead());

    testQueue.dequeue();
    testQueue.dequeue();

    try {
      System.out.println(testQueue.getHead());
    } catch (OOPQueueException oqe) {
      System.out.println(oqe.getMessage());
    }

    try {
      testQueue.dequeue();
    } catch (OOPQueueException oqe) {
      System.out.println(oqe.getMessage());
    }
  }
}
